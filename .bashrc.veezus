export EDITOR=vim

# user:pwd(branch)$
[ -z "$PS1" ] || export PS1="\[\033[01;97m\]\h\[\033[00m\]:\[\033[0;37m\]\w\[\033[00m\]\$(git_prompt_info '(%s)')$ "

alias g="git"
alias jtags="ctags -R app config lib && sed -i '' -E '/^(if|switch|function|module\.exports|it|describe).+language:js$/d' tags"
alias heroku="time heroku"
alias ll="ls -lahF"
alias rake="time rake"
alias today="vi ~/Dropbox/daily_log.txt"
alias todo="vi ~/Dropbox/todo.txt"
alias vi="vim"

# rubygems single-gem search
function gems {
  gem search -ra $1|grep "^$1 "
}

function vol {
  case $1 in
    m)
      sudo osascript -e "set Volume 0"
      ;;
    n)
      sudo osascript -e "set Volume 0.5"
      ;;
    l)
      sudo osascript -e "set Volume 1.5"
      ;;
    *)
      sudo osascript -e "set Volume $1"
      ;;
  esac
}

# meta-p and meta-n - starts with history searching
if ! [ -z "$PS1" ]; then
  bind '"\ep": history-search-backward'
  bind '"\en": history-search-forward'
fi

export HISTCONTROL=ignoredups:erasedups
export HISTSIZE=20000
export HISTIGNORE="fg*:code *:go *:history*"
shopt -s histappend
# Append this session's history to the global session as each command is
# executed
export PROMPT_COMMAND="history -a; $PROMPT_COMMAND"
# Enable IEx history via Erlang
export ERL_AFLAGS="-kernel shell_history enabled"

# `go` allows autocompletion of and navigation to directories within the code
# directory
[ -e "$GO_DIR" ] || GO_DIR="$HOME/code"
export GO_DIR

# `repo` creates a repository on the manger machine
repo() {
  ssh git@manger "mkdir $1 && cd $1 && git init && git config --bool core.bare true"
  git remote add manger git@manger:$1
}

# `code` creates or attaches to and existing tmux session for repositories in
# the code directory
code() {
  cd "$GO_DIR/$1"
  tmux attach -t $1 || tmux new -s $1
}

go() {
  case $1 in
    buildkite)
      cd "/usr/local/var/buildkite-agent/builds/luke.local-1/adorable"
      ;;
    *)
      cd "$GO_DIR/$1"
      ;;
  esac
}

_go()
{
  local cur projects

  [ -r "$GO_DIR" ] || return 0

  eval 'COMPREPLY=()'
  cur=${COMP_WORDS[COMP_CWORD]}
  projects=$(\ls "$GO_DIR")

  if [ $COMP_CWORD -eq 1 ]; then
    eval 'COMPREPLY=( $(compgen -o filenames -W "$projects" $cur) )'
  fi

  return 0
}
complete -F _go code
complete -F _go go

# lifted from dotmatrix http://github.com/hashrocket/dotmatrix
git_prompt_info () {
  local g="$(git rev-parse --git-dir 2>/dev/null)"
  if [ -n "$g" ]; then
    local r
    local b
    local d
    local s
    # Rebasing
    if [ -d "$g/rebase-apply" ] ; then
      if test -f "$g/rebase-apply/rebasing" ; then
        r="|REBASE"
      fi
      b="$(git symbolic-ref HEAD 2>/dev/null)"
    # Interactive rebase
    elif [ -f "$g/rebase-merge/interactive" ] ; then
      r="|REBASE-i"
      b="$(cat "$g/rebase-merge/head-name")"
    # Merging
    elif [ -f "$g/MERGE_HEAD" ] ; then
      r="|MERGING"
      b="$(git symbolic-ref HEAD 2>/dev/null)"
    else
      if [ -f "$g/BISECT_LOG" ] ; then
        r="|BISECTING"
      fi
      if ! b="$(git symbolic-ref HEAD 2>/dev/null)" ; then
        if ! b="$(git describe --exact-match HEAD 2>/dev/null)" ; then
          b="$(cut -c1-7 "$g/HEAD")..."
        fi
      fi
    fi

    # Dirty Branch
    local newfile='?? '
    if [ -n "$ZSH_VERSION" ]; then
      newfile='\?\? '
    fi
    d=''
    s=$(git status --porcelain 2> /dev/null)
    [[ $s =~ "$newfile" ]] && d+='+'
    [[ $s =~ "M " ]] && d+='*'
    [[ $s =~ "D " ]] && d+='-'

    if [ -n "${1-}" ]; then
      printf "$1" "${b##refs/heads/}$r$d"
    else
      printf "(%s) " "${b##refs/heads/}$r$d"
    fi
  fi
}

# Add manger executables to PATH
PATH=$HOME/bin/:$PATH

# Load RVM
PATH=$HOME/.rvm/bin:$PATH
[[ -s "$HOME/.rvm/scripts/rvm" ]] && . "$HOME/.rvm/scripts/rvm"

# Load NVM
export NVM_DIR="$HOME/.nvm"
[ -s "$NVM_DIR/nvm.sh" ] && \. "$NVM_DIR/nvm.sh"
[ -s "$NVM_DIR/bash_completion" ] && \. "$NVM_DIR/bash_completion"

# Add local node_module executables to PATH
export PATH="$PATH:./node_modules/.bin"

[ -e "$HOME/.git-completion.bash" ] && . "$HOME/.git-completion.bash"
[ -e "$HOME/.bashrc.local" ] && . "$HOME/.bashrc.local"
