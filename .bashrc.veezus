# user:pwd(branch)$
[ -z "$PS1" ] || export PS1="\[\033[01;97m\]\h\[\033[00m\]:\[\033[0;37m\]\w\[\033[00m\]\$(git_prompt_info '(%s)')$ "

alias be="bundle exec"
alias changed='git diff --name-only --diff-filter=ACMRTUXB develop'
alias coauth='printf "Co-authored-by: %s" "$(git log --pretty=format:"%an <%ae>" -1000 | sort | uniq | fzf)" | pbcopy'
alias dose="docker-compose"
alias g="git"
alias jtags="ctags -R app config lib && sed -i '' -E '/^(if|switch|function|module\.exports|it|describe).+language:js$/d' tags"
alias heroku="time heroku"
alias k="kubectl"
alias ll="ls -lahF"
alias make="time make"
alias notes="vi -O ~/code/notes/notes ~/code/notes/archive"
alias rails="time bundle exec rails"
alias rake="time bundle exec rake"
alias reflect="vi ~/Dropbox/reflect.txt"
alias rspec="time bundle exec rspec"
alias rubochanged='changed "./***.rb" | xargs rubocop -A'
alias specchanged='changed "./***_spec.rb" | xargs rspec'
alias tags="ctags -R . --exclude=*.rb && ripper-tags -Ra"
alias today="vi ~/Dropbox/daily_log.txt"
alias todo="vi ~/Dropbox/todo.txt"
alias vi="vim"
alias whosbeeneatingmycookies="git whosbeeneatingmycookies | column -ts$'\t'"

# rubygems single-gem search
function gems {
  gem search -ra $1|grep "^$1 "
}

function tags {
  ctags -R . --exclude=*.rb
  ripper-tags -Ra
}

# meta-p and meta-n - starts with history searching
if ! [ -z "$PS1" ]; then
  bind '"\ep": history-search-backward'
  bind '"\en": history-search-forward'
fi

export EDITOR=vim
export BASH_SILENCE_DEPRECATION_WARNING=1
export LANG=en_US.utf-8
# History configuration
export HISTCONTROL=ignoredups:erasedups
export HISTSIZE=20000
export HISTIGNORE="fg*:code *:history*:notes"
shopt -s histappend
# Append this session's history to the global session as each command is
# executed
export PROMPT_COMMAND="history -a; $PROMPT_COMMAND"
# Enable IEx history via Erlang
export ERL_AFLAGS="-kernel shell_history enabled"

# `go` allows autocompletion of and navigation to directories within the code
# directory
[ -e "$CODE_DIR" ] || CODE_DIR="$HOME/code"
export CODE_DIR

# `repo` creates a repository on the manger machine
repo() {
  echo "Initializing repository"
  git init
  echo "Creating repo on manger..."
  ssh git@manger "mkdir $1 && cd $1 && git init && git config --bool core.bare true"
  echo "Adding manger as a remote to this repository..."
  git remote add manger git@manger:$1
  echo "Done"
}

# `code` creates or attaches to and existing tmux session for repositories in
# the code directory
code() {
  cd "$CODE_DIR/$1"
  tmux attach -t $1 || tmux new -s $1
}

_autocomplete_code()
{
  local cur projects

  [ -r "$CODE_DIR" ] || return 0

  eval 'COMPREPLY=()'
  cur=${COMP_WORDS[COMP_CWORD]}
  projects=$(\ls "$CODE_DIR")

  if [ $COMP_CWORD -eq 1 ]; then
    eval 'COMPREPLY=( $(compgen -o filenames -W "$projects" $cur) )'
  fi

  return 0
}
complete -F _autocomplete_code code

# lifted from dotmatrix http://github.com/hashrocket/dotmatrix
git_prompt_info () {
  local g="$(git rev-parse --git-dir 2>/dev/null)"
  if [ -n "$g" ]; then
    local r
    local b
    local d
    local s
    # Rebasing
    if [ -d "$g/rebase-apply" ] ; then
      if test -f "$g/rebase-apply/rebasing" ; then
        r="|REBASE"
      fi
      b="$(git symbolic-ref HEAD 2>/dev/null)"
    # Interactive rebase
    elif [ -f "$g/rebase-merge/interactive" ] ; then
      r="|REBASE-i"
      b="$(cat "$g/rebase-merge/head-name")"
    # Merging
    elif [ -f "$g/MERGE_HEAD" ] ; then
      r="|MERGING"
      b="$(git symbolic-ref HEAD 2>/dev/null)"
    else
      if [ -f "$g/BISECT_LOG" ] ; then
        r="|BISECTING"
      fi
      if ! b="$(git symbolic-ref HEAD 2>/dev/null)" ; then
        if ! b="$(git describe --exact-match HEAD 2>/dev/null)" ; then
          b="$(cut -c1-7 "$g/HEAD")..."
        fi
      fi
    fi

    # Dirty Branch
    local newfile='?? '
    if [ -n "$ZSH_VERSION" ]; then
      newfile='\?\? '
    fi
    d=''
    s=$(git status --porcelain 2> /dev/null)
    [[ $s =~ "$newfile" ]] && d+='+'
    [[ $s =~ "M " ]] && d+='*'
    [[ $s =~ "D " ]] && d+='-'

    if [ -n "${1-}" ]; then
      printf "$1" "${b##refs/heads/}$r$d"
    else
      printf "(%s) " "${b##refs/heads/}$r$d"
    fi
  fi
}

# Add manger executables to PATH
PATH=$HOME/bin/:$PATH

# Load RVM
[[ -s "$HOME/.rvm/scripts/rvm" ]] && export PATH="$PATH:$HOME/.rvm/bin"
[[ -s "$HOME/.rvm/scripts/rvm" ]] && source "$HOME/.rvm/scripts/rvm"

# Load asdf
[[ -s "$HOME/.asdf/asdf.sh" ]] && source "$HOME/.asdf/asdf.sh"
[[ -s "$HOME/.asdf/completions/asdf.bash" ]] && source "$HOME/.asdf/completions/asdf.bash"

# Add local node_module executables to PATH
export PATH="$PATH:./node_modules/.bin"

[ -e "$HOME/.bashrc.local" ] && . "$HOME/.bashrc.local"
